// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  first_name String?
  last_name  String?
  password   String?
  phone      String?
  role       Role      @default(USER)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  is_active  Boolean   @default(true)
  Booking    Booking[]
}

model Country {
  id        String   @id @default(cuid())
  name      String
  picture   String?
  code      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  City      City[]
}

model City {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Place     Place[]
  Country   Country? @relation(fields: [countryId], references: [id])
  countryId String?
}

model Place {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  latitude    Float?
  longitude   Float?
  rating      Float?   @default(5)
  cityId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  city        City?    @relation(fields: [cityId], references: [id])
  lockers     Locker[]
}

model Locker {
  id        String    @id @default(cuid())
  name      String?
  length    Int
  width     Int
  price     Float
  placeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Place     Place?    @relation(fields: [placeId], references: [id])
  Booking   Booking[]
}

model Booking {
  id        String        @id @default(cuid())
  userId    String
  lockerId  String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    BookingStatus @default(PENDING)
  user      User?         @relation(fields: [userId], references: [id])
  locker    Locker?       @relation(fields: [lockerId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  COMPLETED
  CANCELLED
}
